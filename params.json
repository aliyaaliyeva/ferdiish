{"name":"Ferdiish","tagline":"","body":"package fi;\r\n\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Color;\r\nimport java.awt.Dimension;\r\nimport java.awt.Font;\r\nimport java.awt.Frame;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.print.PageFormat;\r\nimport java.awt.print.PrinterException;\r\nimport java.awt.print.PrinterJob;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\n\r\nimport javax.swing.BorderFactory;\r\nimport javax.swing.JFileChooser;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JMenu;\r\nimport javax.swing.JMenuBar;\r\nimport javax.swing.JMenuItem;\r\nimport javax.swing.JOptionPane;\r\nimport javax.swing.JScrollPane;\r\nimport javax.swing.JTextArea;\r\nimport javax.swing.border.Border;\r\nimport javax.swing.event.UndoableEditEvent;\r\nimport javax.swing.event.UndoableEditListener;\r\nimport javax.swing.undo.CannotUndoException;\r\nimport javax.swing.undo.UndoManager;\r\n\r\n@SuppressWarnings(\"serial\")\r\n\r\n\r\npublic class EditorGUI extends JFrame implements ActionListener {\r\n\r\n    public static void main(String[] args) {\r\n        new EditorGUI();\r\n    }\r\n\r\n    \r\n\r\n    // Menular\r\n    private JMenu fileMenu;\r\n    private JMenu editMenu;\r\n    private JMenuItem newFile, openFile, saveFile, saveAsFile, pageSetup, printFile, exit;\r\n    private JMenuItem undoEdit, redoEdit, selectAll, copy, paste, cut;\r\n\r\n\r\n    // Window\r\n    private JFrame editorWindow;\r\n\r\n    // Text Area\r\n    private Border textBorder;\r\n    private JScrollPane scroll;\r\n    private JTextArea textArea;\r\n    private Font textFont;\r\n\r\n    // Window\r\n    private JFrame window;\r\n\r\n    // Printing\r\n    private PrinterJob job;\r\n    public PageFormat format;\r\n\r\n    // Is File Saved/Opened\r\n    private boolean opened = false;\r\n    private boolean saved = false;\r\n\r\n    // Record Open File for quick saving\r\n    private File openedFile;\r\n\r\n    // Undo manager for managing the storage of the undos\r\n    // so that the can be redone if requested\r\n    private UndoManager undo;\r\n\r\n    //============================================\r\n    // CONSTRUCTOR\r\n    //============================================\r\n\r\n    public EditorGUI() {\r\n        super(\"JavaEdit\");\r\n\r\n        // Create Menus\r\n        fileMenu();\r\n        editMenu();\r\n\r\n        // Create Text Area\r\n        createTextArea();\r\n\r\n        // Create Undo Manager for managing undo/redo commands\r\n        undoMan();\r\n\r\n        // Create Window\r\n        createEditorWindow();\r\n    }\r\n\r\n    private JFrame createEditorWindow() {\r\n        editorWindow = new JFrame(\"JavaEdit\");\r\n        editorWindow.setVisible(true);\r\n        editorWindow.setExtendedState(Frame.MAXIMIZED_BOTH);\r\n        editorWindow.setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        // Create Menu Bar\r\n        editorWindow.setJMenuBar(createMenuBar());\r\n        editorWindow.add(scroll, BorderLayout.CENTER);\r\n        editorWindow.pack();\r\n        // Centers application on screen\r\n        editorWindow.setLocationRelativeTo(null);\r\n\r\n        return editorWindow;\r\n    }\r\n\r\n    private JTextArea createTextArea() {\r\n        textBorder = BorderFactory.createBevelBorder(0, Color.RED, Color.RED);\r\n        textArea = new JTextArea(30, 50);\r\n        textArea.setEditable(true);\r\n        textArea.setBorder(BorderFactory.createCompoundBorder(textBorder, BorderFactory.createEmptyBorder(2, 5, 0, 0)));\r\n\r\n        textFont = new Font(\"Verdana\", 0, 14);\r\n        textArea.setFont(textFont);\r\n\r\n        scroll = new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\r\n\r\n        return textArea;        \r\n    }\r\n\r\n    private JMenuBar createMenuBar() {\r\n        JMenuBar menuBar = new JMenuBar();\r\n        setJMenuBar(menuBar);\r\n        menuBar.add(fileMenu);\r\n        menuBar.add(editMenu);\r\n\r\n        return menuBar;\r\n    }\r\n\r\n    private UndoManager undoMan() {\r\n        // Listener for undo and redo functions to document\r\n        undo = new UndoManager();\r\n        textArea.getDocument().addUndoableEditListener(new UndoableEditListener() {\r\n\r\n            @Override\r\n            public void undoableEditHappened(UndoableEditEvent e) {\r\n                undo.addEdit(e.getEdit());\r\n            }\r\n        });\r\n\r\n        return undo;\r\n    }\r\n\r\n    private void fileMenu() {\r\n        // Create File Menu\r\n        fileMenu = new JMenu(\"File\");\r\n        fileMenu.setPreferredSize(new Dimension(40, 20));\r\n\r\n        // Add file menu items\r\n        newFile = new JMenuItem(\"New\");\r\n        newFile.addActionListener(this);\r\n        newFile.setPreferredSize(new Dimension(100, 20));\r\n        newFile.setEnabled(true);\r\n\r\n        openFile = new JMenuItem(\"Open...\");\r\n        openFile.addActionListener(this);\r\n        openFile.setPreferredSize(new Dimension(100, 20));\r\n        openFile.setEnabled(true);\r\n\r\n        saveFile = new JMenuItem(\"Save\");\r\n        saveFile.addActionListener(this);\r\n        saveFile.setPreferredSize(new Dimension(100, 20));\r\n        saveFile.setEnabled(true);\r\n\r\n        saveAsFile = new JMenuItem(\"Save As...\");\r\n        saveAsFile.addActionListener(this);\r\n        saveAsFile.setPreferredSize(new Dimension(100, 20));\r\n        saveAsFile.setEnabled(true);\r\n\r\n        pageSetup = new JMenuItem(\"Page Setup...\");\r\n        pageSetup.addActionListener(this);\r\n        pageSetup.setPreferredSize(new Dimension(100, 20));\r\n        pageSetup.setEnabled(true);\r\n\r\n        printFile = new JMenuItem(\"Print...\");\r\n        printFile.addActionListener(this);\r\n        printFile.setPreferredSize(new Dimension(100, 20));\r\n        printFile.setEnabled(true);\r\n\r\n        exit = new JMenuItem(\"Exit\");\r\n        exit.addActionListener(this);\r\n        exit.setPreferredSize(new Dimension(100, 20));\r\n        exit.setEnabled(true);\r\n\r\n        // Add items to menu\r\n        fileMenu.add(newFile);\r\n        fileMenu.add(openFile);\r\n        fileMenu.add(saveFile);\r\n        fileMenu.add(saveAsFile);\r\n        fileMenu.add(pageSetup);\r\n        fileMenu.add(printFile);\r\n        fileMenu.add(exit);\r\n    }\r\n\r\n    private void editMenu() {\r\n        editMenu = new JMenu(\"Edit\");\r\n        editMenu.setPreferredSize(new Dimension(40, 20));\r\n\r\n        // Add file menu items\r\n        undoEdit = new JMenuItem(\"Undo\");\r\n        undoEdit.addActionListener(this);\r\n        undoEdit.setPreferredSize(new Dimension(100, 20));\r\n        undoEdit.setEnabled(true);\r\n\r\n        redoEdit = new JMenuItem(\"Redo\");\r\n        redoEdit.addActionListener(this);\r\n        redoEdit.setPreferredSize(new Dimension(100, 20));\r\n        redoEdit.setEnabled(true);\r\n\r\n        selectAll = new JMenuItem(\"Select All\");\r\n        selectAll.addActionListener(this);\r\n        selectAll.setPreferredSize(new Dimension(100, 20));\r\n        selectAll.setEnabled(true);\r\n\r\n        copy = new JMenuItem(\"Copy\");\r\n        copy.addActionListener(this);\r\n        copy.setPreferredSize(new Dimension(100, 20));\r\n        copy.setEnabled(true);\r\n\r\n        paste = new JMenuItem(\"Paste\");\r\n        paste.addActionListener(this);\r\n        paste.setPreferredSize(new Dimension(100, 20));\r\n        paste.setEnabled(true);\r\n\r\n        cut = new JMenuItem(\"Cut\");\r\n        cut.addActionListener(this);\r\n        cut.setPreferredSize(new Dimension(100, 20));\r\n        cut.setEnabled(true);\r\n\r\n        // Add items to menu\r\n        editMenu.add(undoEdit);\r\n        editMenu.add(redoEdit);\r\n        editMenu.add(selectAll);\r\n        editMenu.add(copy);\r\n        editMenu.add(paste);\r\n        editMenu.add(cut);\r\n    }\r\n\r\n    // Method for saving files - Removes duplication of code\r\n    private void saveFile(File filename) {\r\n        try {\r\n            BufferedWriter writer = new BufferedWriter(new FileWriter(filename));\r\n            writer.write(textArea.getText());\r\n            writer.close();\r\n            saved = true;\r\n            window.setTitle(\"JavaText - \" + filename.getName());\r\n        } catch (IOException err) {\r\n            err.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Method for quick saving files\r\n    private void quickSave(File filename) {\r\n        try {\r\n            BufferedWriter writer = new BufferedWriter(new FileWriter(filename));\r\n            writer.write(textArea.getText());\r\n            writer.close();\r\n        } catch (IOException err) {\r\n            err.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // Method for opening files\r\n    private void openingFiles(File filename) {\r\n        try {\r\n            openedFile = filename;\r\n            FileReader reader = new FileReader(filename);\r\n            textArea.read(reader, null);\r\n            opened = true;\r\n            window.setTitle(\"JavaEdit - \" + filename.getName());\r\n        } catch (IOException err) {\r\n            err.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent event) {\r\n        if(event.getSource() == newFile) {\r\n            new EditorGUI();\r\n        } else if(event.getSource() == openFile) {\r\n            JFileChooser open = new JFileChooser();\r\n            open.showOpenDialog(null);\r\n            File file = open.getSelectedFile();                \r\n            openingFiles(file);\r\n        } else if(event.getSource() == saveFile) {\r\n            JFileChooser save = new JFileChooser();\r\n            File filename = save.getSelectedFile();\r\n            if(opened == false && saved == false) {\r\n                save.showSaveDialog(null);\r\n                int confirmationResult;\r\n                if(filename.exists()) {\r\n                    confirmationResult = JOptionPane.showConfirmDialog(saveFile, \"Replace existing file?\");\r\n                    if(confirmationResult == JOptionPane.YES_OPTION) {\r\n                        saveFile(filename);                        \r\n                    }\r\n                } else {\r\n                    saveFile(filename);\r\n                }\r\n            } else {\r\n                quickSave(openedFile);\r\n            }\r\n        } else if(event.getSource() == saveAsFile) {\r\n            JFileChooser saveAs = new JFileChooser();\r\n            saveAs.showSaveDialog(null);\r\n            File filename = saveAs.getSelectedFile();\r\n            int confirmationResult;\r\n            if(filename.exists()) {\r\n                confirmationResult = JOptionPane.showConfirmDialog(saveAsFile, \"Replace existing file?\");\r\n                if(confirmationResult == JOptionPane.YES_OPTION) {\r\n                    saveFile(filename);                        \r\n                }\r\n            } else {\r\n                saveFile(filename);\r\n            }\r\n        } else if(event.getSource() == pageSetup) {\r\n            job = PrinterJob.getPrinterJob();\r\n            format = job.pageDialog(job.defaultPage());    \r\n        } else if(event.getSource() == printFile) {\r\n            job = PrinterJob.getPrinterJob();\r\n            if(job.printDialog()) {\r\n                try {\r\n                    job.print();\r\n                } catch (PrinterException err) {\r\n                    err.printStackTrace();\r\n                }\r\n            }\r\n        } else if(event.getSource() == exit) {\r\n            System.exit(0);\r\n        } else if(event.getSource() == undoEdit) {\r\n            try {\r\n                undo.undo();\r\n            } catch(CannotUndoException cu) {\r\n                cu.printStackTrace();\r\n            }\r\n        } else if(event.getSource() == redoEdit) {\r\n            try {\r\n                undo.redo();\r\n            } catch(CannotUndoException cur) {\r\n                cur.printStackTrace();\r\n            }\r\n        } else if(event.getSource() == selectAll) {\r\n            textArea.selectAll();\r\n        }  else if(event.getSource() == copy) {\r\n            textArea.copy();\r\n        } else if(event.getSource() == paste) {\r\n            textArea.paste();\r\n        } else if(event.getSource() == cut) {\r\n            textArea.cut();\r\n        }\r\n    }\r\n\r\n    \r\n    // GETTERS AND SETTERS\r\n   \r\n    public JTextArea getTextArea() {\r\n        return textArea;\r\n    }\r\n\r\n    public void setTextArea(JTextArea text) {\r\n        textArea = text;\r\n    }\r\n}","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}